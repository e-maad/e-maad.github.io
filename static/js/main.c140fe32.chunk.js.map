{"version":3,"sources":["common/utils/seo-name.helper.ts","components/shared/footer/footer.component.tsx","hooks/characters/useGetCharacters.ts","components/shared/search-input/search-input.component.tsx","components/custom-card-header/custom-card-header.component.tsx","components/card/card.component.tsx","containers/characters/characters.component.tsx","containers/home-page/home-page.component.tsx","hooks/characters/useGetCharacterByID.ts","store/action-types.ts","containers/profile-page/profile-page.component.tsx","components/app/app.routes.ts","store/actions/index.ts","containers/search-page/search-page.component.tsx","components/app/app.component.tsx","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["getSEOFriendlyName","id","name","replace","toLowerCase","Footer","history","useHistory","visitedProfiles","useSelector","state","length","Fragment","map","visitedProfile","Button","onClick","push","location","profileLinkClickHandler","color","GET_CHARACTERS","gql","useGetCharacters","variables","skip","useQuery","loadingText","SearchInput","useState","searchInput","setsearchInput","nameFilter","setNameFilter","isAutoCompleteVisible","setAutoCompleteVisibility","filter","loading","data","useEffect","handler","setTimeout","clearTimeout","navigateToSearchPage","query","page","onSearchClickHandler","onKeyPress","event","key","uniqueOptions","Array","from","Set","characters","results","character","Grid","container","spacing","item","xs","Autocomplete","value","onChange","onInputChange","newInputValue","options","selectOnFocus","freeSolo","open","onBlur","renderInput","params","TextField","label","InputProps","onKeyDown","endAdornment","CircularProgress","size","getOptionDisabled","option","variant","startIcon","CustomCardHeader","status","className","classNames","Card","src","image","alt","CardActions","previousPath","pathname","search","Characters","searchQuery","useLocation","Number","setPage","JSON","stringify","info","pages","Pagination","count","Typography","HomePage","GET_CHARACTER_BY_ID","useGetCharacterByID","ADD_VISITED_PROFILE","notAvailbleText","routes","path","component","basePath","title","seoName","useParams","dispatch","useDispatch","characterId","split","goBackClickHandler","isNaN","type","payload","List","ListItem","divider","ListItemText","primary","secondary","species","gender","URLSearchParams","get","App","currentRoute","appRoutes","find","route","document","exact","render","to","initialState","rootReducer","action","pop","store","createStore","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.c140fe32.chunk.js","sourcesContent":["export const getSEOFriendlyName = (id: Number, name: string) => {\n    return `${id}-${name.replace(/ /g, '-').toLowerCase()}`;\n}\n\nexport const getIDFromSEOFriendlyName = (seoName: string) => {\n    return Number(seoName.split('-')[0]);\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Button } from '@material-ui/core';\n\nimport RootState from '../../../common/interfaces/root-state.interface';\nimport VisitedProfile from '../../../common/interfaces/visited-profile.interface';\nimport { getSEOFriendlyName } from '../../../common/utils/seo-name.helper';\n\nconst Footer: React.FC = () => {\n    const history = useHistory();\n    const visitedProfiles = useSelector<RootState, Array<VisitedProfile>>(state => state.visitedProfiles);\n\n    const profileLinkClickHandler = (visitedProfile: VisitedProfile) => {\n        history.push(\n            `/profile/${getSEOFriendlyName(visitedProfile.id, visitedProfile.name)}`,\n            history.location.state);\n    }\n\n    if (!visitedProfiles.length) {\n        return <React.Fragment />\n    }\n\n    return <React.Fragment>\n        {visitedProfiles.map(visitedProfile =>\n            <Button key={visitedProfile.id} onClick={() => profileLinkClickHandler(visitedProfile)} color='primary'>\n                {visitedProfile.name}\n            </Button>\n        )}\n    </React.Fragment>\n}\n\nexport default Footer;","import { gql, useQuery } from '@apollo/client';\n\nimport CharactersData from '../../common/interfaces/characters-data.interface';\nimport PaginationFilter from '../../common/interfaces/pagination-filter.interface';\n\nconst GET_CHARACTERS = gql`\n    query GetCharacters($page: Int, $filter: FilterCharacter ) {\n        characters(page: $page, filter: $filter) {\n            info {\n                count\n                pages\n            }\n            results {\n                id\n                name\n                image\n                status\n            }\n        }\n    }\n`\n\nconst useGetCharacters = (variables: PaginationFilter, skip: boolean = false) =>\n    useQuery<CharactersData, PaginationFilter>(GET_CHARACTERS, {\n        variables,\n        skip\n    });\n\nexport default useGetCharacters;","import React, { ChangeEvent, KeyboardEventHandler, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { Button, CircularProgress, Grid, TextField } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport useGetCharacters from '../../../hooks/characters/useGetCharacters';\n\nconst searchDebounceInMs = 1000;\nconst loadingText = 'Loading...';\nconst SearchInput: React.FC = () => {\n    const history = useHistory();\n    const [searchInput, setsearchInput] = useState('')\n    const [nameFilter, setNameFilter] = useState('')\n\n    // added this state to forcefully close auto complete suggestion\n    const [isAutoCompleteVisible, setAutoCompleteVisibility] = useState(false);\n\n    // skipped initial call \n    // skipped all calls when there is no search input\n    // for optimization\n    const { loading, data } = useGetCharacters({ filter: { name: nameFilter } }, nameFilter === '');\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setNameFilter(searchInput);\n        }, searchDebounceInMs);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [searchInput])\n\n    const navigateToSearchPage = (query: string) => {\n        setNameFilter('');\n        setAutoCompleteVisibility(false);\n        history.push(`/search?q=${query}`, { page: 1 });\n    }\n\n    const searchChangeHandler = (event: ChangeEvent<{}>, value: string | null | undefined) => {\n        navigateToSearchPage(value || '');\n    }\n\n    const searchInputChangeHandler = (event: ChangeEvent<{}>, newInputValue: string) => {\n        if (newInputValue) {\n            setsearchInput(newInputValue);\n        }\n\n        // showing auto complete suggestions on text change \n        if (!isAutoCompleteVisible) {\n            setAutoCompleteVisibility(true);\n        }\n    }\n\n    const onSearchClickHandler = () => {\n        navigateToSearchPage(searchInput);\n    }\n\n    const onKeyPress: KeyboardEventHandler<HTMLInputElement> = event => {\n        if (event.key === 'Enter' && searchInput) {\n            setAutoCompleteVisibility(false);\n            onSearchClickHandler();\n        }\n    }\n\n    // characters may have repetitive names\n    // removed repetitve options\n    // added 'Loading...' option when it is loading and there is no data to show\n    const uniqueOptions = Array.from(new Set(\n        data?.characters.results.map(character => character.name) ||\n        (loading ? [loadingText] : [])\n    ))\n\n    return <Grid container spacing={3}>\n        <Grid item xs={9}>\n            <Autocomplete\n                value={searchInput}\n                onChange={searchChangeHandler}\n                onInputChange={searchInputChangeHandler}\n                options={uniqueOptions}\n                selectOnFocus\n                freeSolo\n                open={isAutoCompleteVisible}\n                onBlur={() => setAutoCompleteVisibility(false)}\n                renderInput={(params) => (\n                    <TextField {...params} label=\"Search Character\"\n                        InputProps={{\n                            ...params.InputProps,\n                            onKeyDown: onKeyPress,\n                            endAdornment: (\n                                <React.Fragment>\n                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                    {params.InputProps.endAdornment}\n                                </React.Fragment>\n                            ),\n                        }}\n                    />\n                )}\n                getOptionDisabled={(option) => option === loadingText}\n            />\n        </Grid>\n        <Grid item xs={3}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                startIcon={<SearchIcon />}\n                onClick={onSearchClickHandler}\n            >\n                Search\n            </Button>\n        </Grid>\n    </Grid>\n\n}\n\nexport default SearchInput;","import './custom-card-header.scss';\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport CustomCardHeaderProps from '../../common/types/custom-card-header-props.type';\n\nconst CustomCardHeader: React.FC<CustomCardHeaderProps> = ({ name, status }) => {\n    return <div className='custom-card-header-container'>\n        <div className='custom-card-header'>\n            {name}\n            <span className={classNames('custom-card-header__status', status.toLowerCase())}>\n                {status}\n            </span>\n        </div>\n    </div>\n}\n\nexport default CustomCardHeader","import React from 'react';\nimport { useHistory } from 'react-router';\n\nimport { Button, Card as MaterialUICard, CardActions } from '@material-ui/core';\n\nimport CardProps from '../../common/types/card-props.type';\nimport { getSEOFriendlyName } from '../../common/utils/seo-name.helper';\nimport CustomCardHeader from '../custom-card-header/custom-card-header.component';\n\nconst Card: React.FC<CardProps> = ({ character, page }) => {\n    const history = useHistory();\n\n    // passing state (page and previous path) just to make sure \n    // that the user land on the same page (pagination)\n    const goToProfileClickHandler = (id: number, name: string) => {\n        history.push(`/profile/${getSEOFriendlyName(id, name)}`,\n            { page, previousPath: history.location.pathname + history.location.search })\n    }\n\n    return (\n        <MaterialUICard>\n            <CustomCardHeader name={character.name || ''} status={character.status || ''} />\n            <img src={character.image} alt={character.name} />\n            <CardActions>\n                <Button\n                    onClick={() => goToProfileClickHandler(character.id || 0, character.name || '')}\n                    size=\"small\" color=\"primary\"\n                >\n                    Profile\n                </Button>\n            </CardActions>\n        </MaterialUICard>\n    )\n}\n\nexport default Card","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nimport { Grid, Typography } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport LocationState from '../../common/interfaces/location-state.interface';\nimport Card from '../../components/card/card.component';\nimport useGetCharacters from '../../hooks/characters/useGetCharacters';\n\ntype CharactersComponentProps = {\n    searchQuery?: string\n}\n\nconst Characters: React.FC<CharactersComponentProps> = ({ searchQuery = '' }) => {\n    const location = useLocation<LocationState>();\n    const [page, setPage] = useState(Number(location?.state?.page) || 1);\n    const { loading, data } = useGetCharacters({ page, filter: { name: searchQuery } });\n\n    // adder this useEffect to update page on location.state.change\n    useEffect(() => {\n        setPage(location?.state?.page || 1);\n    }, [location.state])\n\n    const onPageChangeHandler = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n    };\n\n    if (loading) {\n        return <React.Fragment>Loading ...</React.Fragment>;\n    }\n\n    if (!data?.characters.results.length) {\n        return <Typography variant=\"h6\">\n            No Records found.\n        </Typography>\n    }\n\n    return <React.Fragment>\n        <Grid container spacing={3}>\n            {data.characters.results.map(character =>\n                <Grid key={character.id} item>\n                    <Card character={character} page={page} />\n                </Grid>)}\n        </Grid>\n        data: {JSON.stringify(data)}\n        {(data.characters.info.pages || 0) > 1 ?\n            <Pagination\n                onChange={onPageChangeHandler}\n                page={page}\n                count={data?.characters?.info?.pages}\n                color=\"primary\" />\n            : ''\n        }\n    </React.Fragment>\n}\n\nexport default Characters","import Characters from '../characters/characters.component';\n\nconst HomePage: React.FC = () => {\n    return <Characters />\n}\n\nexport default HomePage","import { gql, useQuery } from '@apollo/client';\n\nimport CharacterData from '../../common/interfaces/character-data.interface';\nimport Character from '../../common/interfaces/character.interface';\n\nexport const GET_CHARACTER_BY_ID = gql`\n    query getCharacter ($id: ID!) {\n        character (id: $id){\n            id\n            name\n            status\n            image\n            location {\n                name\n            }\n            species\n            type\n            gender\n        }\n    }\n`\nconst useGetCharacterByID = (id: number) => useQuery<CharacterData, Character>(GET_CHARACTER_BY_ID, {\n    variables: { id }\n});\n\nexport default useGetCharacterByID;","export const ADD_VISITED_PROFILE = \"ADD_VISITED_PROFILE\";","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport { Dispatch } from 'redux';\n\nimport { Button, List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport LocationState from '../../common/interfaces/location-state.interface';\nimport RootAction from '../../common/types/root-action.type';\nimport { getIDFromSEOFriendlyName } from '../../common/utils/seo-name.helper';\nimport useGetCharacterByID from '../../hooks/characters/useGetCharacterByID';\nimport { addVisitedProfile } from '../../store/actions';\nimport { useEffect } from 'react';\n\nconst notAvailbleText = 'Not Available'\nconst ProfilePage: React.FC = () => {\n    const history = useHistory<LocationState>();\n    const params = useParams<{ characterId: string }>();\n    const dispatch = useDispatch<Dispatch<RootAction>>();\n    const characterId = getIDFromSEOFriendlyName(params.characterId);\n\n    const goBackClickHandler = () => {\n        history.push(history.location.state?.previousPath || '/', history.location.state);\n    }\n\n    // incorrect or empty params handling case\n    if (isNaN(characterId) || characterId === 0) {\n        goBackClickHandler();\n    }\n\n    const { data, loading } = useGetCharacterByID(characterId)\n\n    useEffect(() => {\n        if (!loading && data?.character?.id) {\n            dispatch(addVisitedProfile(data?.character));\n        }\n        // additional dependencies to avoid warning\n    }, [loading, data, dispatch])\n\n    if (loading) {\n        return <React.Fragment>Loading ...</React.Fragment>\n    }\n\n    // handled case when there is no data against given id\n    // not happen usually but when profile name entered manually to url\n    if (!data) {\n        if (!loading) goBackClickHandler();\n        return <React.Fragment></React.Fragment>\n    }\n\n    return <React.Fragment>\n        <Typography variant='h4'>{data.character.name}</Typography>\n        <img src={data?.character.image} alt={data?.character.name} />\n        <List>\n            <ListItem divider>\n                <ListItemText primary=\"Status\"\n                    secondary={data.character.status || notAvailbleText} />\n            </ListItem>\n            <ListItem divider>\n                <ListItemText primary=\"Species\"\n                    secondary={data.character.species || notAvailbleText} />\n            </ListItem>\n            <ListItem divider>\n                <ListItemText primary=\"Type\"\n                    secondary={data.character.type || notAvailbleText} />\n            </ListItem>\n            <ListItem divider>\n                <ListItemText primary=\"Gender\"\n                    secondary={data?.character.gender || notAvailbleText} />\n            </ListItem>\n            <ListItem divider>\n                <ListItemText primary=\"Location Name\"\n                    secondary={data.character.location?.name || notAvailbleText} />\n            </ListItem>\n        </List>\n        <Button onClick={goBackClickHandler} variant=\"contained\"\n            startIcon={<ArrowBackIcon />}>Go Back</Button>\n    </React.Fragment>\n}\n\nexport default ProfilePage","import { AppRoute } from \"../../common/interfaces/app-route.interface\";\nimport HomePage from \"../../containers/home-page/home-page.component\";\nimport ProfilePage from \"../../containers/profile-page/profile-page.component\";\nimport SearchPage from \"../../containers/search-page/search-page.component\";\n\nconst routes: AppRoute[] = [\n    { path: '/', component: HomePage, basePath: '', title: 'Home Page' },\n    { path: '/profile/:characterId', component: ProfilePage, basePath: 'profile', title: 'Character Profile' },\n    { path: '/search', component: SearchPage, basePath: 'search', title: 'Search' }\n]\n\nexport default routes;","import Character from '../../common/interfaces/character.interface';\nimport AddVisitedProfileAction from '../../common/types/add-visited-profile-action.type';\nimport { ADD_VISITED_PROFILE } from '../action-types';\n\nexport const addVisitedProfile = (character: Character) =>\n    ({\n        type: ADD_VISITED_PROFILE,\n        payload: { id: character.id, name: character.name || '' }\n    }) as AddVisitedProfileAction","import React from 'react';\nimport { useHistory } from 'react-router';\n\nimport Characters from '../characters/characters.component';\n\nconst SearchPage: React.FC = () => {\n    const history = useHistory();\n    const searchParams = new URLSearchParams(history.location.search);\n    const query = searchParams.get('q');\n\n    if (!query) {\n        history.push('/');\n        return <React.Fragment></React.Fragment>;\n    }\n\n    return <Characters searchQuery={query} />\n}\n\nexport default SearchPage;","import './app.scss';\n\nimport React, { useEffect } from 'react';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\n\nimport Footer from '../shared/footer/footer.component';\nimport SearchInput from '../shared/search-input/search-input.component';\nimport appRoutes from './app.routes'\n\nconst App: React.FC = () => {\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tconst currentRoute = appRoutes.find(route => location.pathname.split('/')[1] === route.basePath);\n\t\t// simplest way to set title, can use other libraries like Helmet\n\t\tdocument.title = currentRoute?.title || '';\n\t}, [location.pathname])\n\n\treturn (\n\t\t<div className='app__container'>\n\t\t\t<SearchInput />\n\t\t\t<Switch>\n\t\t\t\t{appRoutes.map(route => <Route key={route.path} path={route.path} exact component={route.component} />)}\n\t\t\t\t<Route render={() => <Redirect to=\"/\" />} />\n\t\t\t</Switch>\n\t\t\t<div className='app__footer'>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","import RootState from '../../common/interfaces/root-state.interface';\nimport RootAction from '../../common/types/root-action.type';\nimport { ADD_VISITED_PROFILE } from '../action-types';\n\nconst initialState: RootState = {\n  visitedProfiles: []\n}\n\nconst rootReducer = (state: RootState = initialState, action: RootAction) => {\n  switch (action.type) {\n    case ADD_VISITED_PROFILE: {\n      // Reasons for adding this logic at reducer level:\n      // this requirement is not component specific\n      // if we add this in action dispatcher component we have to add watcher for store in that comp too\n      if (state.visitedProfiles.find(visitedProfile => visitedProfile.id === action.payload.id)) {\n        return state;\n      } else {\n        const visitedProfiles = [action.payload, ...state.visitedProfiles]\n        if (visitedProfiles.length > 10) {\n          visitedProfiles.pop()\n        }\n        return { visitedProfiles };\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","import { createStore } from \"redux\"\nimport rootReducer from \"./reducers\"\n\nconst store = createStore(rootReducer)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app.component';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nimport './style.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst client = new ApolloClient({\n\turi: 'https://rickandmortyapi.com/graphql',\n\tcache: new InMemoryCache(),\n});\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t</ApolloProvider>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}