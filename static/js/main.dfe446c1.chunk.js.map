{"version":3,"sources":["common/utils/seo-name.helper.ts","components/shared/footer/footer.component.tsx","hooks/characters/useGetCharacters.ts","components/shared/search-input/search-input.component.tsx","components/custom-card-header/custom-card-header.component.tsx","components/card/card.component.tsx","containers/characters/characters.component.tsx","containers/home-page/home-page.component.tsx","hooks/characters/useGetCharacterByID.ts","store/action-types.ts","containers/profile-page/profile-page.component.tsx","store/actions/index.ts","components/app/app.routes.ts","containers/search-page/search-page.component.tsx","components/app/app.component.tsx","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["getSEOFriendlyName","id","name","replace","toLowerCase","Footer","visitedProfiles","useSelector","state","length","map","visitedProfile","to","Button","color","GET_CHARACTERS","gql","useGetCharacters","variables","skip","useQuery","loadingText","SearchInput","history","useHistory","useState","searchInput","setsearchInput","nameFilter","setNameFilter","isAutoCompleteVisible","setAutoCompleteVisibility","filter","loading","data","useEffect","handler","setTimeout","clearTimeout","navigateToSearchPage","query","push","page","onSearchClickHandler","onKeyPress","event","key","uniqueOptions","Array","from","Set","characters","results","character","Grid","container","spacing","item","xs","Autocomplete","value","onChange","onInputChange","newInputValue","options","selectOnFocus","freeSolo","open","renderInput","params","TextField","label","InputProps","onKeyDown","endAdornment","Fragment","CircularProgress","size","getOptionDisabled","option","variant","startIcon","onClick","CustomCardHeader","status","className","classNames","Card","src","image","alt","CardActions","previousPath","location","pathname","search","Characters","searchQuery","useLocation","Number","setPage","info","pages","Pagination","count","Typography","HomePage","GET_CHARACTER_BY_ID","useGetCharacterByID","ADD_VISITED_PROFILE","notAvailbleText","ProfilePage","useParams","dispatch","useDispatch","characterId","seoName","namePieces","split","shift","getIDFromSEOFriendlyName","goBackClickHandler","isNaN","type","payload","List","ListItem","divider","ListItemText","primary","secondary","species","gender","routes","path","component","basePath","title","queryParams","QueryString","parse","ignoreQueryPrefix","q","App","currentRoute","appRoutes","find","route","document","exact","render","initialState","rootReducer","action","pop","store","createStore","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.dfe446c1.chunk.js","sourcesContent":["export const getSEOFriendlyName = (id: Number, name: string) => {\n    return `${id}-${name.replace(/ /g, '-').toLowerCase()}`;\n}\n\nexport const getIDFromSEOFriendlyName = (seoName: string) => {\n    const namePieces = seoName.split('-');\n    return Number(namePieces.shift());\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { Button } from '@material-ui/core';\n\nimport RootState from '../../../common/interfaces/root-state.interface';\nimport VisitedProfile from '../../../common/interfaces/visited-profile.interface';\nimport { getSEOFriendlyName } from '../../../common/utils/seo-name.helper';\n\nconst Footer: React.FC = () => {\n    const visitedProfiles = useSelector<RootState, Array<VisitedProfile>>(state => state.visitedProfiles);\n    return <div>\n        {visitedProfiles.length ? visitedProfiles.map(visitedProfile =>\n            <Link key={visitedProfile.id} to={`/profile/${getSEOFriendlyName(visitedProfile.id, visitedProfile.name)}`}>\n                <Button color='primary'>\n                    {visitedProfile.name}\n                </Button>\n            </Link>\n        ) : ''}\n    </div>\n}\n\nexport default Footer;","import { gql, useQuery } from '@apollo/client';\n\nimport CharactersData from '../../common/interfaces/characters-data.interface';\nimport PaginationFilter from '../../common/interfaces/pagination-filter.interface';\n\nconst GET_CHARACTERS = gql`\n    query GetCharacters($page: Int, $filter: FilterCharacter ) {\n        characters(page: $page, filter: $filter) {\n            info {\n                count\n                pages\n            }\n            results {\n                id\n                name\n                image\n                status\n            }\n        }\n    }\n`\n\nconst useGetCharacters = (variables: PaginationFilter, skip: boolean = false) =>\n    useQuery<CharactersData, PaginationFilter>(GET_CHARACTERS, {\n        variables,\n        skip\n    });\n\nexport default useGetCharacters;","import React, { ChangeEvent, KeyboardEventHandler, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { Button, CircularProgress, Grid, TextField } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport useGetCharacters from '../../../hooks/characters/useGetCharacters';\n\nconst searchDebounceInMs = 1000;\nconst loadingText = 'Loading...';\nconst SearchInput: React.FC = () => {\n    const history = useHistory();\n    const [searchInput, setsearchInput] = useState('')\n    const [nameFilter, setNameFilter] = useState('')\n    const [isAutoCompleteVisible, setAutoCompleteVisibility] = useState(false);\n\n    // skipped initial call\n    const { loading, data } = useGetCharacters({ filter: { name: nameFilter } }, nameFilter === '');\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setNameFilter(searchInput);\n        }, searchDebounceInMs);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [searchInput])\n\n    const navigateToSearchPage = (query: string) => {\n        setNameFilter('');\n        setAutoCompleteVisibility(false);\n        history.push(`/search?q=${query}`, { page: 1 });\n    }\n\n    const searchChangeHandler = (event: ChangeEvent<{}>, value: string | null | undefined) => {\n        navigateToSearchPage(value || '');\n    }\n\n    const searchInputChangeHandler = (event: ChangeEvent<{}>, newInputValue: string) => {\n        if (newInputValue) {\n            setsearchInput(newInputValue);\n        }\n\n        if (!isAutoCompleteVisible) {\n            setAutoCompleteVisibility(true);\n        }\n    }\n\n    const onSearchClickHandler = () => {\n        navigateToSearchPage(searchInput);\n    }\n\n    const onKeyPress: KeyboardEventHandler<HTMLInputElement> = event => {\n        if (event.key === 'Enter' && searchInput) {\n            setAutoCompleteVisibility(false);\n            onSearchClickHandler();\n        }\n    }\n\n    // characters may have repetitive names\n    // removed repetitve options\n    // added 'Loading...' option when there is no data due to loading\n    const uniqueOptions = Array.from(new Set(data?.characters.results.map(character => character.name) || (loading ? [loadingText] : [])))\n\n    return <Grid container spacing={3}>\n        <Grid item xs={9}>\n            <Autocomplete\n                value={searchInput}\n                onChange={searchChangeHandler}\n                onInputChange={searchInputChangeHandler}\n                options={uniqueOptions}\n                selectOnFocus\n                freeSolo\n                open={isAutoCompleteVisible}\n                renderInput={(params) => (\n                    <TextField {...params} label=\"Search Character\"\n                        InputProps={{\n                            ...params.InputProps,\n                            onKeyDown: onKeyPress,\n                            endAdornment: (\n                                <React.Fragment>\n                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                    {params.InputProps.endAdornment}\n                                </React.Fragment>\n                            ),\n                        }}\n                    />\n                )}\n                getOptionDisabled={(option) => option === loadingText}\n            />\n        </Grid>\n        <Grid item xs={3}>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                startIcon={<SearchIcon />}\n                onClick={onSearchClickHandler}\n            >\n                Search\n            </Button>\n        </Grid>\n    </Grid>\n\n}\n\nexport default SearchInput;","import './custom-card-header.scss';\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport CustomCardHeaderProps from '../../common/types/custom-card-header-props.type';\n\nconst CustomCardHeader: React.FC<CustomCardHeaderProps> = ({ name, status }) => {\n    return <div className='custom-card-header-container'>\n        <div className='custom-card-header'>\n            {name}\n            <span className={classNames('custom-card-header__status', status.toLowerCase())}>\n                {status}\n            </span>\n        </div>\n    </div>\n}\n\nexport default CustomCardHeader","import React from 'react';\nimport { useHistory } from 'react-router';\n\nimport { Button, Card as MaterialUICard, CardActions } from '@material-ui/core';\n\nimport CardProps from '../../common/types/card-props.type';\nimport { getSEOFriendlyName } from '../../common/utils/seo-name.helper';\nimport CustomCardHeader from '../custom-card-header/custom-card-header.component';\n\nconst Card: React.FC<CardProps> = ({character, page}) => {\n    const history = useHistory();\n\n    const goToProfileClickHandler = (id: number, name: string) => {\n        history.push(`/profile/${getSEOFriendlyName(id, name)}`, { page, previousPath: history.location.pathname + history.location.search })\n    }\n\n    return (\n        <MaterialUICard>\n            <CustomCardHeader name={character.name || ''} status={character.status || ''} />\n            <img src={character.image} alt={character.name} />\n            <CardActions>\n                <Button onClick={() => goToProfileClickHandler(character.id || 0, character.name || '')} size=\"small\" color=\"primary\">\n                    profile\n                </Button>\n            </CardActions>\n        </MaterialUICard>\n    )\n}\n\nexport default Card","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nimport { Grid, Typography } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport LocationState from '../../common/interfaces/location-state.interface';\nimport Card from '../../components/card/card.component';\nimport useGetCharacters from '../../hooks/characters/useGetCharacters';\n\ntype CharactersComponentProps = {\n    searchQuery?: string\n}\n\nconst Characters: React.FC<CharactersComponentProps> = ({ searchQuery = '' }) => {\n    const location = useLocation<LocationState>();\n    const [page, setPage] = useState(Number(location?.state?.page) || 1);\n    const { loading, data } = useGetCharacters({ page, filter: { name: searchQuery } });\n\n    // adder this useEffect to update page on location.state.change\n    useEffect(() => {\n        setPage(location?.state?.page || 1);\n    }, [location.state])\n\n    const onPageChangeHandler = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n    };\n\n    return <div>\n        {loading ? 'Loading ...' : data?.characters.results.length ? <div>\n            <Grid container spacing={3}>\n                {data?.characters?.results?.map(character =>\n                    <Grid key={character.id} item>\n                        <Card character={character} page={page} />\n                    </Grid>)}\n            </Grid>\n\n            {(data?.characters?.info?.pages || 0) > 1 ?\n                <Pagination\n                    onChange={onPageChangeHandler}\n                    page={page}\n                    count={data?.characters?.info?.pages}\n                    color=\"primary\" /> : ''}\n\n        </div> : <Typography variant=\"h6\">\n            No Records found.\n        </Typography>}\n    </div>\n}\n\nexport default Characters\n\n","import Characters from '../characters/characters.component';\n\nconst HomePage: React.FC = () => {\n    return <Characters />\n}\n\nexport default HomePage\n\n","import { gql, useQuery } from '@apollo/client';\n\nimport CharacterData from '../../common/interfaces/character-data.interface';\nimport Character from '../../common/interfaces/character.interface';\n\nexport const GET_CHARACTER_BY_ID = gql`\nquery getCharacter ($id: ID!) {\n    character (id: $id){\n        id\n        name\n        status\n        image\n        location {\n            name\n        }\n        species\n        type\n        gender\n    }\n}\n`\nconst useGetCharacterByID = (id: number) => useQuery<CharacterData, Character>(GET_CHARACTER_BY_ID, {\n    variables: { id }\n});\n\nexport default useGetCharacterByID;","export const ADD_VISITED_PROFILE = \"ADD_VISITED_PROFILE\";","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport { Dispatch } from 'redux';\n\nimport { Button, List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport LocationState from '../../common/interfaces/location-state.interface';\nimport RootAction from '../../common/types/root-action.type';\nimport { getIDFromSEOFriendlyName } from '../../common/utils/seo-name.helper';\nimport useGetCharacterByID from '../../hooks/characters/useGetCharacterByID';\nimport { addVisitedProfile } from '../../store/actions';\nimport { useEffect } from 'react';\n\nconst notAvailbleText = 'Not Available'\nconst ProfilePage: React.FC = () => {\n    const history = useHistory<LocationState>();\n    const params = useParams<{ characterId: string }>();\n    const dispatch = useDispatch<Dispatch<RootAction>>();\n    const characterId = Number(getIDFromSEOFriendlyName(params.characterId));\n\n    const goBackClickHandler = () => {\n        history.push(history.location.state?.previousPath || '/', history.location.state);\n    }\n\n    if (isNaN(characterId) || characterId === 0) {\n        goBackClickHandler();\n    }\n\n    const { data, loading } = useGetCharacterByID(characterId)\n\n    useEffect(() => {\n        if (!loading && data?.character?.id) {\n            dispatch(addVisitedProfile(data?.character));\n        }\n        // additional dependencies to avoid warning\n    }, [loading, data, dispatch])\n\n    return <div>\n        {loading ? 'Loading ...' :\n            <div>\n                <Typography variant='h4'>{data?.character.name}</Typography>\n                <img src={data?.character.image} alt={data?.character.name} />\n                <List>\n                    <ListItem divider>\n                        <ListItemText primary=\"Status\" secondary={data?.character.status || notAvailbleText} />\n                    </ListItem>\n                    <ListItem divider>\n                        <ListItemText primary=\"Species\" secondary={data?.character.species || notAvailbleText} />\n                    </ListItem>\n                    <ListItem divider>\n                        <ListItemText primary=\"Type\" secondary={data?.character.type || notAvailbleText} />\n                    </ListItem>\n                    <ListItem divider>\n                        <ListItemText primary=\"Gender\" secondary={data?.character.gender || notAvailbleText} />\n                    </ListItem>\n                    <ListItem divider>\n                        <ListItemText primary=\"Location Name\" secondary={data?.character.location?.name || notAvailbleText} />\n                    </ListItem>\n                </List>\n                <Button onClick={goBackClickHandler} variant=\"contained\" startIcon={<ArrowBackIcon />}>Go Back</Button>\n            </div>}\n    </div>\n}\n\nexport default ProfilePage","import Character from '../../common/interfaces/character.interface';\nimport AddVisitedProfileAction from '../../common/types/add-visited-profile-action.type';\nimport { ADD_VISITED_PROFILE } from '../action-types';\n\nexport const addVisitedProfile = (character: Character) =>\n    ({\n        type: ADD_VISITED_PROFILE,\n        payload: { id: character.id, name: character.name || '' }\n    }) as AddVisitedProfileAction\n","import { AppRoute } from \"../../common/interfaces/app-route.interface\";\nimport HomePage from \"../../containers/home-page/home-page.component\";\nimport ProfilePage from \"../../containers/profile-page/profile-page.component\";\nimport SearchPage from \"../../containers/search-page/search-page.component\";\n\nconst routes = [\n    { path: '/', component: HomePage, basePath: '', title: 'Home Page' },\n    { path: '/profile/:characterId', component: ProfilePage, basePath: 'profile', title: 'Character Profile' },\n    { path: '/search', component: SearchPage, basePath: 'search', title: 'Search' }\n] as AppRoute[]\n\nexport default routes;\n\n","import QueryString from 'qs';\nimport React from 'react';\nimport { useLocation } from 'react-router';\n\nimport Characters from '../characters/characters.component';\n\nconst SearchPage: React.FC = () => {\n    const location = useLocation();\n    const queryParams = QueryString.parse(location.search, { ignoreQueryPrefix: true });\n    return <Characters searchQuery={queryParams.q as string} />\n}\n\nexport default SearchPage;","import './app.scss';\n\nimport React, { useEffect } from 'react';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\n\nimport Footer from '../shared/footer/footer.component';\nimport SearchInput from '../shared/search-input/search-input.component';\nimport appRoutes from './app.routes'\n\nconst App: React.FC = () => {\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tconst currentRoute = appRoutes.find(route => location.pathname.split('/')[1] === route.basePath);\n\t\tdocument.title = currentRoute?.title || '';\n\t}, [location.pathname])\n\n\treturn (\n\t\t<div className='app__container'>\n\t\t\t<SearchInput />\n\t\t\t<Switch>\n\t\t\t\t{appRoutes.map(route => <Route key={route.path} path={route.path} exact component={route.component} />)}\n\t\t\t\t<Route render={() => <Redirect to=\"/\" />} />\n\t\t\t</Switch>\n\t\t\t<div className='app__footer'>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","import RootState from '../../common/interfaces/root-state.interface';\nimport RootAction from '../../common/types/root-action.type';\nimport { ADD_VISITED_PROFILE } from '../action-types';\n\nconst initialState: RootState = {\n  visitedProfiles: []\n}\n\nconst rootReducer = (state: RootState = initialState, action: RootAction) => {\n  switch (action.type) {\n    case ADD_VISITED_PROFILE: {\n      if (state.visitedProfiles.find(visitedProfile => visitedProfile.id === action.payload.id)) {\n        return state;\n      } else {\n        const visitedProfiles = [action.payload, ...state.visitedProfiles]\n        if (visitedProfiles.length > 10) {\n          visitedProfiles.pop()\n        }\n        return { visitedProfiles };\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","import { createStore } from \"redux\"\nimport rootReducer from \"./reducers\"\n\nconst store = createStore(rootReducer)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app.component';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nimport './style.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst client = new ApolloClient({\n\turi: 'https://rickandmortyapi.com/graphql',\n\tcache: new InMemoryCache(),\n});\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t</ApolloProvider>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}